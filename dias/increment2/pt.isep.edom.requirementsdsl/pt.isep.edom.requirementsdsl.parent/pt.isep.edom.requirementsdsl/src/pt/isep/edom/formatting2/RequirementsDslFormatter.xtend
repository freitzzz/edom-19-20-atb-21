/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import pt.isep.edom.services.RequirementsDslGrammarAccess
import requirements.Model
import requirements.Requirement
import requirements.RequirementGroup

class RequirementsDslFormatter extends AbstractFormatter2 {
	
	@Inject extension RequirementsDslGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		val open = model.regionFor.keyword("{")
		val close = model.regionFor.keyword("}")
		open.append[newLine]
		interior(open, close)[indent]
						
		for (RequirementGroup requirementGroup : model.getGroups()) {
			requirementGroup.prepend[newLine]
			requirementGroup.format;
			requirementGroup.append[newLine]
		}
	}

	def dispatch void format(RequirementGroup requirementGroup, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		val openChildren = requirementGroup.regionFor.keyword("{")
		val closeChildren = requirementGroup.regionFor.keyword("}")
		openChildren.append[newLine]
		interior(openChildren, closeChildren)[indent]
		
		for (RequirementGroup _requirementGroup : requirementGroup.getChildren()) {
			_requirementGroup.prepend[newLine]
			_requirementGroup.format
			_requirementGroup.append[newLine]
		}
		
		val openRequirement = requirementGroup.regionFor.keyword("{")
		val closeRequirement = requirementGroup.regionFor.keyword("}")
		openChildren.append[newLine]
		interior(openRequirement, closeRequirement)[indent]
		
		for (Requirement requirement : requirementGroup.getRequirements()) {
			requirement.prepend[newLine]
			requirement.format
			requirement.append[newLine]
		}
	}
	
	// TODO: implement for Requirement, Comment
}
