/**
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import pt.isep.edom.services.RequirementsDslGrammarAccess;
import requirements.Model;
import requirements.Requirement;
import requirements.RequirementGroup;

@SuppressWarnings("all")
public class RequirementsDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RequirementsDslGrammarAccess _requirementsDslGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(model).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(model).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<RequirementGroup> _groups = model.getGroups();
    for (final RequirementGroup requirementGroup : _groups) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<RequirementGroup>prepend(requirementGroup, _function_2);
        document.<RequirementGroup>format(requirementGroup);
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<RequirementGroup>append(requirementGroup, _function_3);
      }
    }
  }
  
  protected void _format(final RequirementGroup requirementGroup, @Extension final IFormattableDocument document) {
    final ISemanticRegion openChildren = this.textRegionExtensions.regionFor(requirementGroup).keyword("{");
    final ISemanticRegion closeChildren = this.textRegionExtensions.regionFor(requirementGroup).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(openChildren, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(openChildren, closeChildren, _function_1);
    EList<RequirementGroup> _children = requirementGroup.getChildren();
    for (final RequirementGroup _requirementGroup : _children) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<RequirementGroup>prepend(_requirementGroup, _function_2);
        document.<RequirementGroup>format(_requirementGroup);
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<RequirementGroup>append(_requirementGroup, _function_3);
      }
    }
    final ISemanticRegion openRequirement = this.textRegionExtensions.regionFor(requirementGroup).keyword("{");
    final ISemanticRegion closeRequirement = this.textRegionExtensions.regionFor(requirementGroup).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(openChildren, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(openRequirement, closeRequirement, _function_3);
    EList<Requirement> _requirements = requirementGroup.getRequirements();
    for (final Requirement requirement : _requirements) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Requirement>prepend(requirement, _function_4);
        document.<Requirement>format(requirement);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Requirement>append(requirement, _function_5);
      }
    }
  }
  
  public void format(final Object model, final IFormattableDocument document) {
    if (model instanceof XtextResource) {
      _format((XtextResource)model, document);
      return;
    } else if (model instanceof Model) {
      _format((Model)model, document);
      return;
    } else if (model instanceof RequirementGroup) {
      _format((RequirementGroup)model, document);
      return;
    } else if (model instanceof EObject) {
      _format((EObject)model, document);
      return;
    } else if (model == null) {
      _format((Void)null, document);
      return;
    } else if (model != null) {
      _format(model, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, document).toString());
    }
  }
}
