/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMapElementAccess().getAlternatives(), "rule__MapElement__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getPriorityAccess().getAlternatives(), "rule__Priority__Alternatives");
			builder.put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
			builder.put(grammarAccess.getMapAccess().getGroup_3(), "rule__Map__Group_3__0");
			builder.put(grammarAccess.getMapAccess().getGroup_4(), "rule__Map__Group_4__0");
			builder.put(grammarAccess.getMapAccess().getGroup_4_3(), "rule__Map__Group_4_3__0");
			builder.put(grammarAccess.getRelationshipAccess().getGroup(), "rule__Relationship__Group__0");
			builder.put(grammarAccess.getRelationshipAccess().getGroup_3(), "rule__Relationship__Group_3__0");
			builder.put(grammarAccess.getTopicAccess().getGroup(), "rule__Topic__Group__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_4(), "rule__Topic__Group_4__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_5(), "rule__Topic__Group_5__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_6(), "rule__Topic__Group_6__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_7(), "rule__Topic__Group_7__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_8(), "rule__Topic__Group_8__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_8_3(), "rule__Topic__Group_8_3__0");
			builder.put(grammarAccess.getTopicAccess().getGroup_9(), "rule__Topic__Group_9__0");
			builder.put(grammarAccess.getMapAccess().getTitleAssignment_3_1(), "rule__Map__TitleAssignment_3_1");
			builder.put(grammarAccess.getMapAccess().getElementsAssignment_4_2(), "rule__Map__ElementsAssignment_4_2");
			builder.put(grammarAccess.getMapAccess().getElementsAssignment_4_3_1(), "rule__Map__ElementsAssignment_4_3_1");
			builder.put(grammarAccess.getRelationshipAccess().getNameAssignment_1(), "rule__Relationship__NameAssignment_1");
			builder.put(grammarAccess.getRelationshipAccess().getTypeAssignment_3_1(), "rule__Relationship__TypeAssignment_3_1");
			builder.put(grammarAccess.getRelationshipAccess().getSourceAssignment_5(), "rule__Relationship__SourceAssignment_5");
			builder.put(grammarAccess.getRelationshipAccess().getTargetAssignment_7(), "rule__Relationship__TargetAssignment_7");
			builder.put(grammarAccess.getTopicAccess().getNameAssignment_2(), "rule__Topic__NameAssignment_2");
			builder.put(grammarAccess.getTopicAccess().getDescriptionAssignment_4_1(), "rule__Topic__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getTopicAccess().getStartAssignment_5_1(), "rule__Topic__StartAssignment_5_1");
			builder.put(grammarAccess.getTopicAccess().getEndAssignment_6_1(), "rule__Topic__EndAssignment_6_1");
			builder.put(grammarAccess.getTopicAccess().getPriorityAssignment_7_1(), "rule__Topic__PriorityAssignment_7_1");
			builder.put(grammarAccess.getTopicAccess().getSubtopicsAssignment_8_2(), "rule__Topic__SubtopicsAssignment_8_2");
			builder.put(grammarAccess.getTopicAccess().getSubtopicsAssignment_8_3_1(), "rule__Topic__SubtopicsAssignment_8_3_1");
			builder.put(grammarAccess.getTopicAccess().getParentAssignment_9_1(), "rule__Topic__ParentAssignment_9_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
