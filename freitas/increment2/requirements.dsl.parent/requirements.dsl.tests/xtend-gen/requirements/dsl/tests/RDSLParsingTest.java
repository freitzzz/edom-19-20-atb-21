/**
 * generated by Xtext 2.19.0
 */
package requirements.dsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.ocl.common.OCLConstants;
import org.eclipse.ocl.pivot.internal.delegate.OCLDelegateDomain;
import org.eclipse.ocl.pivot.internal.delegate.OCLInvocationDelegateFactory;
import org.eclipse.ocl.pivot.internal.delegate.OCLSettingDelegateFactory;
import org.eclipse.ocl.pivot.internal.delegate.OCLValidationDelegateFactory;
import org.eclipse.ocl.pivot.model.OCLstdlib;
import org.eclipse.ocl.xtext.essentialocl.EssentialOCLStandaloneSetup;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import requirements.Model;
import requirements.dsl.tests.RDSLInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(RDSLInjectorProvider.class)
@SuppressWarnings("all")
public class RDSLParsingTest {
  @BeforeAll
  public static void initOCL() {
    String oclDelegateURI = OCLConstants.OCL_DELEGATE_URI;
    OCLInvocationDelegateFactory.Global _global = new OCLInvocationDelegateFactory.Global();
    EOperation.Internal.InvocationDelegate.Factory.Registry.INSTANCE.put(oclDelegateURI, _global);
    OCLSettingDelegateFactory.Global _global_1 = new OCLSettingDelegateFactory.Global();
    EStructuralFeature.Internal.SettingDelegate.Factory.Registry.INSTANCE.put(oclDelegateURI, _global_1);
    OCLValidationDelegateFactory.Global _global_2 = new OCLValidationDelegateFactory.Global();
    EValidator.ValidationDelegate.Registry.INSTANCE.put(oclDelegateURI, _global_2);
    OCLDelegateDomain.initialize(null);
    EssentialOCLStandaloneSetup.doSetup();
    OCLstdlib.install();
  }
  
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void modelThatCompliesWithDSLGrammarSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Meal Designation\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show a meal designation.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Meal Nutritional Data\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show a meal nutritional data.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Meal Type\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show a meal type.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Meal Location\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show the location in which a meal is available.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Meal Price\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show the price of a meal.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'List Meal Ingreditens\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to list the ingredients of a meal.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'List Meal Allergens\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to list the allergens of a meal if existent.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Check Meal Availability\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to check if a meal is available. A meal is only available in a period of 24 hours and at a specific location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Pay Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able handle a meal payment. The type of user that is paying for the meal should be recorded. It should not be possible to pay for an unavailable meal or a meal that is unavailable at the payment location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Save Meal\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Meal Designation\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Meal Nutritional Data\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Meal Type\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Meal Location\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Meal Price\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'List Meal Ingreditens\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'List Meal Allergens\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Check Meal Availability\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append(", RequirementGroup \'Manage Unserved Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding unserved meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'3\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Unserved Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save an unserved meal that will be packaged in the latter. It is identified by an identification number, has a production and expiration date and a designation of the meal. An unserved meal also has a state, and once saved its state is set to frozen.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Unserved Meal Identification Number\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show an unserved meal identification number.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Unserved Meal Designation\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show an unserved meal designation.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Unserved Meal Production Date\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show an unserved meal production date.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Unserved Meal Expiration Date\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show an unserved meal expiration date.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Show Unserved Meal State\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to show an unserved meal state.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Add Meal Ingredients\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'UseCase\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Add Meal Allergens\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'UseCase\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Adminstrator\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Save Unserved Meal\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Unserved Meal Identification Number\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Unserved Meal Designation\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Unserved Meal Production Date\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Unserved Meal Expiration Date\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Show Unserved Meal State\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Add Meal Ingredients\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Kitchen Worker\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Add Meal Allergens\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'Actor\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Remove Item from Inventory\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Adminstrator\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'UseCase\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Use Case Without Comment with Use Case Without Comment Dependency\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Manage Meals.Save Meal\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Use Case With Comment with Use Case Without Comment Dependency\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Manage Meals.Show Meal Designation\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'UseCase\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Use Case Without Comment with Use Case With Comment Dependency\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Add Meal Ingredients\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(", Requirement \'Use Case With Comment with Use Case With Comment Dependency\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("created \'2019-11-04T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("dependencies (");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\'Add Meal Allergens\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("Comment {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("subject \'UseCase\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(", RequirementGroup \'Quality Attributes\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA quality attributes.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'1\'");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateWhichIsNotRecognizedByDSLFailsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'thisdateisnotvalid\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertFalse(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateInYYYYMMDDUsingSingleQuotesFormatSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-01-01\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateInYYYYMMDDTHHMMSSUsingSingleQuotesFormatSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-01-01T00:00:00\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateInYYYYMMDDTHHMMSSZUsingSingleQuotesFormatSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \'2019-01-01T00:00:00.000+0000\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateInYYYYMMDDUsingDoubleQuotesFormatSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \"2019-01-01\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateInYYYYMMDDTHHMMSSUsingDoubleQuotesFormatSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \"2019-01-01T00:00:00\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void modelWithDateInYYYYMMDDTHHMMSSZUsingDoubleQuotesFormatSucceedsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title \'Gorgeous Food Application\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RequirementGroup \'Functional Requirements\' {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("description \'This group details GFA functional requirements.\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("RequirementGroup \'Manage Meals\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("description \'Details functionalities regarding meals management.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("id \'2\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("requirements {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("Requirement \'Save Meal\' {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("description \'The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("author \'EDOM\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("created \"2019-01-01T00:00:00.000+0000\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("id \'0\'");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testNoModelDefinitionFailsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      boolean hasErrors = (!_isEmpty);
      Assertions.assertTrue(hasErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelWithNoTitleDefinitionFailsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelWithTitleLengthLessThanThreeFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title tw");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testModelWithTitleLengthGreaterOrEqualThanThreeSucceedsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("title two");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue((!hasDiagnosticErrors));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementGroupWithNameLengthLessThanFiveFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"four\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementGroupWithNameLengthGreaterOrEqualThanFiveSucceedsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fiveee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue((!hasDiagnosticErrors));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementGroupWithoutDescriptionFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementGroupWithDescriptionLengthLessThanTenFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This grou\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementGroupWithDescriptionLengthGreaterOrEqualThanTenSucceedsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue((!hasDiagnosticErrors));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementGroupWithSubRequirementGroupsWithSameNameFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("children {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("RequirementGroup \"fivee\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithoutNameFailsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithNameLengthLessThanFiveFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"four\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithNameLengthGreaterOrEqualThanFiveSucceedsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue((!hasDiagnosticErrors));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithoutDescriptionFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithDescriptionLengthLessThanTenFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"tententen\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithDescriptionLengthGreaterOrEqualThanTenSucceedsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue((!hasDiagnosticErrors));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithoutCreationDateFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithoutAuthorFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithAuthorLengthLessThanThreeFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"tw\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author ED");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testRequirementWithAuthorLengthGreaterOrEqualThanThreeSucceedsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author \"EDO\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created \"2019-10-26T18:51:52.009+0100\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue((!hasDiagnosticErrors), diagnostic.getChildren().toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testVersionWithMajorLowerThanZeroFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major -1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testVersionWithMinorLowerThanZeroFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor -1");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testVersionWithServiceLowerThanZeroFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service -1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithoutAuthorFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("body \"Comment for this requirement\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("subject \"Subject of the comment\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithAuthorLengthLessThanThreeFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("author \"tw\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("body \"Comment for this requirement\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("subject \"Subject of the comment\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithoutBodyFailsParse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("author \"EDOM\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("subject \"Subject of the comment\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithBodyLengthLessThanFifteenFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("author \"EDOM\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("body \"Requirement\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("subject \"Subject of the comment\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithoutSubjectFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("author \"EDOM\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("body \"Comment of Requirement\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithSubjectLengthLessThanTenFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("author \"EDOM\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("body \"Comment of Requirement\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("subject \"Subjectt\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testCommentWithoutCreationDateFailsOCLCompliance() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Model {");
      _builder.newLine();
      _builder.append("title \"Gorgeous Food Application Requirements\"");
      _builder.newLine();
      _builder.append("groups {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("RequirementGroup \"fivee\" {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("description \"This group\"");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requirements{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Requirement \"fivee\"{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("description \"The software should be able to save a meal that is served to students and non students. A meal is identified by its designation, has a type, nutritional data, list of ingredients, can also contain allergens, has a cost-price and is available at a specific location. Once a meal is saved it is only available for the next 24 hours in the specified location.\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("author EDOM");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("created 2019-10-26T18:51:52.009+0100");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("id \"0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("version Version {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("major 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("minor 0");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("service 1");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("comments {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("Comment{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("author \"EDOM\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("body \"Comment of Requirement\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("subject \"Subject of the comment\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      Model result = this.parseHelper.parse(model);
      Diagnostic diagnostic = Diagnostician.INSTANCE.validate(result);
      int _severity = diagnostic.getSeverity();
      boolean hasDiagnosticErrors = (_severity != Diagnostic.OK);
      Assertions.assertTrue(hasDiagnosticErrors);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
