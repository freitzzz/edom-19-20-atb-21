module requirements.dsl.GenerateRDSL

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import requirements.javacode.workflow.ResourceReader
import requirements.javacode.workflow.ModelValidator

var rootPath = ".."

var _dslFilePath = ""

var dslFilePath = "${_dslFilePath}"

var dslInMemoryObjectSlotName = "dslinmemory"

Workflow {
	
	component = ResourceReader{
		slot = dslInMemoryObjectSlotName
		uri = dslFilePath
	}
	
	component = ModelValidator{
		slot = dslInMemoryObjectSlotName
	}
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "requirements.dsl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "requirements.dsl.RDSL"
			fileExtensions = "rdsl"
			referencedResource = "platform:/resource/requirements/model/requirements.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			formatter = {
				generateStub = true
			}

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			junitSupport = {
				junitVersion = "5"
			}
		}
	}
}
