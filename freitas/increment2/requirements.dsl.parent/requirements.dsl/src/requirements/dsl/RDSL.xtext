// automatically generated by Xtext
grammar requirements.dsl.RDSL with org.eclipse.xtext.common.Terminals

import "http://www.example.org/requirements" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	'{'
		('title' title=EString)?
		('groups' '{' groups+=RequirementGroup ( "," groups+=RequirementGroup)* '}' )?
	'}';





RequirementGroup returns RequirementGroup:
	{RequirementGroup}
	'RequirementGroup'
	name=EString
	'{'
		('description' description=EString)?
		('id' id=EString)?
		('requirements' '{' requirements+=Requirement ( "," requirements+=Requirement)* '}' )?
		('children' '{' children+=RequirementGroup ( "," children+=RequirementGroup)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Requirement returns Requirement:
	'Requirement'
	'{'
		('title' title=EString)?
		('description' description=EString)?
		('type' type=Type)?
		('priority' priority=Priority)?
		('author' author=EString)?
		('created' created=EDate)?
		('id' id=EString)?
		('state' state=State)?
		('resolution' resolution=Resolution)?
		('dependencies' '(' dependencies+=[Requirement|EString] ( "," dependencies+=[Requirement|EString])* ')' )?
		'version' version=Version
		('comments' '{' comments+=Comment ( "," comments+=Comment)* '}' )?
		('children' '{' children+=Requirement ( "," children+=Requirement)* '}' )?
	'}';

Version returns Version:
	'Version'
	'{'
		'major' major=EInt
		'minor' minor=EInt
		'service' service=EInt
	'}';

Comment returns Comment:
	{Comment}
	'Comment'
	'{'
		('subject' subject=EString)?
		('body' body=EString)?
		('author' author=EString)?
		('created' created=EDate)?
		('children' '{' children+=Comment ( "," children+=Comment)* '}' )?
	'}';

enum Type returns Type:
				FUNCTIONAL = 'FUNCTIONAL' | NONFUNCTIONAL = 'NONFUNCTIONAL';

enum Priority returns Priority:
				HIGH = 'HIGH' | MEDIUM = 'MEDIUM' | LOW = 'LOW';

EDate returns ecore::EDate:
	EString /* TODO: implement this rule and an appropriate IValueConverter */;

enum State returns State:
				NEW = 'NEW' | REVIEWED = 'REVIEWED' | APPROVED = 'APPROVED' | RESOLVED = 'RESOLVED';

enum Resolution returns Resolution:
				INVALID = 'INVALID' | ACCEPTED = 'ACCEPTED' | IMPLEMENTED = 'IMPLEMENTED' | LATER = 'LATER';

EInt returns ecore::EInt:
	'-'? INT;
