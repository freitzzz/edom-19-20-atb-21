/**
 * generated by Xtext 2.19.0
 */
package requirements.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import requirements.Comment;
import requirements.Model;
import requirements.Requirement;
import requirements.RequirementGroup;
import requirements.Version;
import requirements.dsl.services.RDSLGrammarAccess;

@SuppressWarnings("all")
public class RDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RDSLGrammarAccess _rDSLGrammarAccess;
  
  /**
   * We want our Model to be formatted in the following format:
   * 
   * Model {
   * 	title ...
   * 	groups {...}
   * }
   */
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    final ISemanticRegion open_bracket = this.textRegionExtensions.regionFor(model).keyword("{");
    final ISemanticRegion close_bracket = this.textRegionExtensions.regionFor(model).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open_bracket, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open_bracket, close_bracket, _function_1);
    EList<RequirementGroup> _groups = model.getGroups();
    for (final RequirementGroup requirementGroup : _groups) {
      {
        document.<RequirementGroup>format(requirementGroup);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<RequirementGroup>append(requirementGroup, _function_2);
      }
    }
  }
  
  /**
   * We want our RequirementGroup to be formatted in the following format:
   * 
   * RequirentGroup {
   * 	name ...
   * 	description ...
   *  id ...
   *  parent ...
   *  requirements {...}
   *  children {...}
   * }
   */
  protected void _format(final RequirementGroup requirementGroup, @Extension final IFormattableDocument document) {
    final ISemanticRegion open_bracket = this.textRegionExtensions.regionFor(requirementGroup).keyword("{");
    final ISemanticRegion close_bracket = this.textRegionExtensions.regionFor(requirementGroup).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open_bracket, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open_bracket, close_bracket, _function_1);
    EList<Requirement> _requirements = requirementGroup.getRequirements();
    for (final Requirement requirement : _requirements) {
      {
        document.<Requirement>format(requirement);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Requirement>append(requirement, _function_2);
      }
    }
    EList<RequirementGroup> _children = requirementGroup.getChildren();
    for (final RequirementGroup _requirementGroup : _children) {
      {
        document.<RequirementGroup>format(_requirementGroup);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<RequirementGroup>append(_requirementGroup, _function_2);
      }
    }
  }
  
  /**
   * We want our Requirement to be formatted in the following format:
   * 
   * Requirement {
   * 	title ...
   * 	description ...
   *  type ...
   *  priority ...
   *  author ...
   *  created ...
   *  id ...
   *  state ...
   *  resolution ...
   *  version {...}
   *  dependencies {...}
   *  children {...}
   *  comments {...}
   * }
   */
  protected void _format(final Requirement requirement, @Extension final IFormattableDocument document) {
    final ISemanticRegion open_bracket = this.textRegionExtensions.regionFor(requirement).keyword("{");
    final ISemanticRegion close_bracket = this.textRegionExtensions.regionFor(requirement).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open_bracket, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open_bracket, close_bracket, _function_1);
    EList<Requirement> _dependencies = requirement.getDependencies();
    for (final Requirement dependency : _dependencies) {
      {
        document.<Requirement>format(dependency);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Requirement>append(dependency, _function_2);
      }
    }
    EList<Requirement> _children = requirement.getChildren();
    for (final Requirement children : _children) {
      {
        document.<Requirement>format(children);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Requirement>append(children, _function_2);
      }
    }
    EList<Comment> _comments = requirement.getComments();
    for (final Comment comment : _comments) {
      {
        document.<Comment>format(comment);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Comment>append(comment, _function_2);
      }
    }
  }
  
  /**
   * We want our Version to be formatted in the following format:
   * 
   * Version {
   * 	major ...
   * 	minor ...
   * 	service ...
   * }
   */
  protected void _format(final Version version, @Extension final IFormattableDocument document) {
    final ISemanticRegion open_bracket = this.textRegionExtensions.regionFor(version).keyword("{");
    final ISemanticRegion close_bracket = this.textRegionExtensions.regionFor(version).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open_bracket, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open_bracket, close_bracket, _function_1);
  }
  
  /**
   * We want our Comment to be formatted in the following format:
   * 
   * Comment {
   * 	body ...
   * 	author ...
   * 	created ...
   * 	children {...}
   * }
   */
  protected void _format(final Comment comment, @Extension final IFormattableDocument document) {
    final ISemanticRegion open_bracket = this.textRegionExtensions.regionFor(comment).keyword("{");
    final ISemanticRegion close_bracket = this.textRegionExtensions.regionFor(comment).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open_bracket, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open_bracket, close_bracket, _function_1);
    EList<Comment> _children = comment.getChildren();
    for (final Comment _comment : _children) {
      {
        document.<Comment>format(_comment);
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Comment>append(_comment, _function_2);
      }
    }
  }
  
  public void format(final Object comment, final IFormattableDocument document) {
    if (comment instanceof XtextResource) {
      _format((XtextResource)comment, document);
      return;
    } else if (comment instanceof Comment) {
      _format((Comment)comment, document);
      return;
    } else if (comment instanceof Model) {
      _format((Model)comment, document);
      return;
    } else if (comment instanceof Requirement) {
      _format((Requirement)comment, document);
      return;
    } else if (comment instanceof RequirementGroup) {
      _format((RequirementGroup)comment, document);
      return;
    } else if (comment instanceof Version) {
      _format((Version)comment, document);
      return;
    } else if (comment instanceof EObject) {
      _format((EObject)comment, document);
      return;
    } else if (comment == null) {
      _format((Void)null, document);
      return;
    } else if (comment != null) {
      _format(comment, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(comment, document).toString());
    }
  }
}
