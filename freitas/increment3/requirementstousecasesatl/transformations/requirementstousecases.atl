-- @atlcompiler emftvm
-- @path UC=/pt.isep.edom.usecases2/model/usecases2.ecore
-- @path RQ=/requirements/model/requirements.ecore

module requirementstousecases;
create UseCases : UC from Requirements : RQ;

helper def : allFunctionalRequirements(): Set(RQ!Requirement) = 
	RQ!Requirement
	.allInstances()
	-> select(requirement | requirement.type = #FUNCTIONAL);
	

helper context RQ!Requirement def : toActor() : UC!Actor = 
	let actor : UC!Actor = UC!Actor.newInstance()
	
	in actor.name = self.title;

helper context RQ!Requirement def : toUseCase() : UC!UseCase = 
	let use_case : UC!UseCase = UC!UseCase.newInstance()
	
	in use_case.name = self.title;
	


rule ModelToUseCaseModel {
	from
		model : RQ!Model
	to 
		use_case_model : UC!UseCaseModel ()
}

rule RequirementWithActorCommentToActor {
	from
		requirement : RQ!Requirement(
			requirement.comments.first().subject = 'Actor'
		)
	to 
		actor : UC!Actor (
			name <- requirement.title
		)
}

rule RequirementWithUseCaseCommentToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.comments.first().subject = 'UseCase'
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
}

rule RequirementWithoutCommentsToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.comments.isEmpty()
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
}

rule RequirementWithActorCommentAndUseCaseDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.comments.first().subject = 'Actor'
			and not requirement.dependencies.isEmpty()
			and (
				requirement.dependencies.first().comments.isEmpty()
				or requirement.dependencies.first().comments.first().author = 'UseCase'
			)
		)
	to 
		association : UC!Association (
			name <- requirement.title + '_' + requirement.dependencies.first().title,
			actor <- requirement.toActor(),
			usecase <- requirement.dependencies.first().toUseCase()
		)
}

rule RequirementWithUseCaseAndActorDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.comments.isEmpty()
			or requirement.comments.first().subject = 'UseCase'
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().comments.first().author = 'Author'
		)
	to 
		association : UC!Association (
			name <- requirement.dependencies.first().title + '_' + requirement.title,
			actor <- requirement.dependencies.first().toActor(),
			usecase <- requirement.toUseCase()
		)
}

rule RequirementWithUseCaseAndUseCaseDependencyToUseCaseWithInclusion {
	from
		requirement : RQ!Requirement(
			requirement.comments.isEmpty()
			or requirement.comments.first().subject = 'UseCase'
			and not requirement.dependencies.isEmpty()
			and (
				requirement.dependencies.first().comments.isEmpty()
				or requirement.dependencies.first().comments.first().subject = 'UseCase'
			)
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- requirement.dependencies.first().toUseCase()
		)
}