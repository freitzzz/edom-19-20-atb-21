-- @atlcompiler emftvm
-- @path UC=/pt.isep.edom.usecases2/model/usecases2.ecore
-- @path RQ=/requirements/model/requirements.ecore

module requirementstousecases;
create UseCases : UC from Requirements : RQ;

helper def : allFunctionalRequirements(): Set(RQ!Requirement) = 
	RQ!Requirement
	.allInstances()
	-> select(requirement | requirement.type = #FUNCTIONAL);

helper def : allRequirementsThatAreUseCases(): Set(RQ!Requirement) =
	thisModule.allFunctionalRequirements()
	-> select(requirement | requirement.isUseCase() and not requirement.isUseCaseAssociation());

helper def : allRequirementsThatAreActors(): Set(RQ!Requirement) =
	thisModule.allFunctionalRequirements()
	-> select(requirement | requirement.isActor() and not requirement.isActorAssociation());

helper def : allRequirementsThatAreAssociations(): Set(RQ!Requirement) =
	thisModule.allFunctionalRequirements()
	-> select(requirement | requirement.isUseCaseAssociation() or requirement.isActorAssociation() );

helper context RQ!Requirement def : isUseCaseWithoutComment() : Boolean = 
	self.comments.isEmpty();

helper context RQ!Requirement def : isUseCaseWithComment() : Boolean = 
	not self.comments.isEmpty()
	and self.comments.first().subject = 'UseCase';

helper context RQ!Requirement def : isUseCase() : Boolean = 
	self.isUseCaseWithoutComment()
	or self.isUseCaseWithComment();

helper context RQ!Requirement def : isActor() : Boolean = 
	not self.comments.isEmpty()
	and self.comments.first().subject = 'Actor';

helper context RQ!Requirement def : isUseCaseInclusion : Boolean = 
	self.isUseCase()
	and not self.dependencies.isEmpty()
	and self.dependencies.first().isUseCase();

helper context RQ!Requirement def : isUseCaseAssociation() : Boolean = 
	self.isUseCase()
	and not self.dependencies.isEmpty()
	and self.dependencies.first().isActor();

helper context RQ!Requirement def : isActorAssociation() : Boolean = 
	self.isActor()
	and not self.dependencies.isEmpty()
	and self.dependencies.first().isUseCase();



-- This sequence is defined in order to map transformed requirements in use cases by their names
-- By doing this it is possible to compare in transformations which transformation equality colides
-- And only create one unique use case per association
helper def : useCases : Map(String, UC!UseCase) = Map{};


-- This sequence is defined in order to map transformed requirements in actors by their names
-- By doing this it is possible to compare in transformations which transformation equality colides
-- And only create one unique actor per association
helper def : actors : Map(String, UC!Actor) = Map{};


-- This sequence contains all transformed requirements in actors
helper def : transformedActors : Sequence(UC!Actor) = Sequence{};


-- This sequence contains all transformed requirements in use cases
helper def : transformedUseCases : Sequence(UC!UseCase) = Sequence{};


-- This UseCaseModel has the reference of the transformed use case model
-- This is defined as in associations transformations, actors and use cases 
-- That haven't been created yet, are created but placed outside of the use case model context
-- By defining the use case model as accessible in all transformations context, it is possible 
-- To assign the actors and use cases being transformed, contained in transformedUseCases and transformedActors
-- Which will remove the problem of those association use cases and actors being created outside of the use case model context
helper def : useCaseModel : UC!UseCaseModel = OclUndefined;
	

rule ModelToUseCaseModel {
	from
		model : RQ!Model
		
	using 
	{
			actors : Sequence(UC!Actor) = Sequence{};
	}
		
	to 
		use_case_model : UC!UseCaseModel (
			usecase <- thisModule.allRequirementsThatAreUseCases(),
			actor <- thisModule.allRequirementsThatAreActors(),
			association <- thisModule.allRequirementsThatAreAssociations()
		)
		
	do {
		thisModule.useCaseModel <- use_case_model;
	}
}

rule RequirementWithActorCommentToActor {
	from
		requirement : RQ!Requirement(
			requirement.isActor()
			and requirement.dependencies.isEmpty()
		)
	to 
		actor : UC!Actor (
			name <- requirement.title
		)
	do{
		thisModule.actors <- thisModule.actors.including(requirement.title, actor);
		
		thisModule.transformedActors <- thisModule.transformedActors.append(actor);
		
		thisModule.useCaseModel.actor <- thisModule.transformedActors;
	}
}

rule RequirementWithUseCaseCommentToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithComment()
			and requirement.dependencies.isEmpty()
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
	do{
		thisModule.useCases <- thisModule.useCases.including(requirement.title, use_case);
		
		thisModule.transformedUseCases <- thisModule.transformedUseCases.append(use_case);
		
		thisModule.useCaseModel.usecase <- thisModule.transformedUseCases;
	}
}

rule RequirementWithoutCommentsToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithoutComment()
			and requirement.dependencies.isEmpty() -- this is to prevent transformation match with rules: RequirementWithUseCaseWithoutCommentAndUseCaseDependencyToUseCaseWithInclusion
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
	do{
		thisModule.useCases <- thisModule.useCases.including(requirement.title, use_case);
		
		thisModule.transformedUseCases <- thisModule.transformedUseCases.append(use_case);
		
		thisModule.useCaseModel.usecase <- thisModule.transformedUseCases;
	}
}

rule RequirementWithActorCommentAndUseCaseDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.isActorAssociation()
		)
	to 
		association : UC!Association (
			name <- requirement.title + '_' + requirement.dependencies.first().title
		)
	do{
		
		if(thisModule.actors.get(requirement.title) = OclUndefined){
			thisModule.InsertRequirementAsActorInActorsMap(requirement);
		}
		
		association.usecase <- thisModule.useCases.get(requirement.dependencies.first().title);
		association.actor <- thisModule.actors.get(requirement.title);
	}
}

rule RequirementWithUseCaseAndActorDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseAssociation()
		)
	to 
		association : UC!Association (
			name <- requirement.dependencies.first().title + '_' + requirement.title
		)
	do{
		
		if(thisModule.useCases.get(requirement.title) = OclUndefined){
			thisModule.InsertRequirementAsUseCaseInUseCasesMap(requirement);
		}
		
		association.usecase <- thisModule.useCases.get(requirement.title);
		association.actor <- thisModule.actors.get(requirement.dependencies.first().title);
	}
}

rule InclusionRequirementToInclusionUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseInclusion
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- Set{_include}
		),
		_include : UC!Include (
			name <- requirement.title + '_' + requirement.dependencies.first().title,
			usecase <- requirement.dependencies.first()
		)
		
	do {
		
		thisModule.transformedUseCases <- thisModule.transformedUseCases.append(use_case_with_inclusion);
		
		thisModule.useCaseModel.usecase <- thisModule.transformedUseCases;
		
	}
}


rule InsertRequirementAsActorInActorsMap(requirement : RQ!Requirement){
	
	to 
		actor : UC!Actor(
			name <- requirement.title	
		)
		
	do {
		thisModule.actors <- thisModule.actors.including(requirement.title, actor);
		
		thisModule.transformedActors <- thisModule.transformedActors.append(actor);
		
		thisModule.useCaseModel.actor <- thisModule.transformedActors;
	}
	
}

rule InsertRequirementAsUseCaseInUseCasesMap(requirement : RQ!Requirement){
	
	to 
		use_case : UC!UseCase(
			name <- requirement.title	
		)
		
	do {
		thisModule.useCases <- thisModule.useCases.including(requirement.title, use_case);
		
		thisModule.transformedUseCases <- thisModule.transformedUseCases.append(use_case);
		
		thisModule.useCaseModel.usecase <- thisModule.transformedUseCases;
	}
	
}