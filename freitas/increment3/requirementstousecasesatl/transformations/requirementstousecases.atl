-- @atlcompiler emftvm
-- @path UC=/pt.isep.edom.usecases2/model/usecases2.ecore
-- @path RQ=/requirements/model/requirements.ecore

module requirementstousecases;
create UseCases : UC from Requirements : RQ;

helper def : allFunctionalRequirements(): Set(RQ!Requirement) = 
	RQ!Requirement
	.allInstances()
	-> select(requirement | requirement.type = #FUNCTIONAL);

helper def : allRequirementsThatAreUseCases(): Set(RQ!Requirement) =
	thisModule.allFunctionalRequirements()
	-> select(requirement | requirement.isUseCase() and not requirement.isUseCaseAssociation());

helper def : allRequirementsThatAreActors(): Set(RQ!Requirement) =
	thisModule.allFunctionalRequirements()
	-> select(requirement | requirement.isActor() and not requirement.isActorAssociation());

helper def : allRequirementsThatAreAssociations(): Set(RQ!Requirement) =
	thisModule.allFunctionalRequirements()
	-> select(requirement | requirement.isUseCaseAssociation() or requirement.isActorAssociation() );

helper context RQ!Requirement def : isUseCaseWithoutComment() : Boolean = 
	self.comments.isEmpty();

helper context RQ!Requirement def : isUseCaseWithComment() : Boolean = 
	not self.comments.isEmpty()
	and self.comments.first().subject = 'UseCase';

helper context RQ!Requirement def : isUseCase() : Boolean = 
	self.isUseCaseWithoutComment()
	or self.isUseCaseWithComment();

helper context RQ!Requirement def : isActor() : Boolean = 
	not self.comments.isEmpty()
	and self.comments.first().subject = 'Actor';

helper context RQ!Requirement def : isUseCaseInclusion : Boolean = 
	self.isUseCase()
	and not self.dependencies.isEmpty()
	and self.dependencies.first().isUseCase();

helper context RQ!Requirement def : isUseCaseAssociation() : Boolean = 
	self.isUseCase()
	and not self.dependencies.isEmpty()
	and self.dependencies.first().isActor();

helper context RQ!Requirement def : isActorAssociation() : Boolean = 
	self.isActor()
	and not self.dependencies.isEmpty()
	and self.dependencies.first().isUseCase();
	

rule ModelToUseCaseModel {
	from
		model : RQ!Model
	to 
		use_case_model : UC!UseCaseModel (
			usecase <- thisModule.allRequirementsThatAreUseCases(),
			actor <- thisModule.allRequirementsThatAreActors(),
			association <- thisModule.allRequirementsThatAreAssociations()
		)
}

rule RequirementWithActorCommentToActor {
	from
		requirement : RQ!Requirement(
			requirement.isActor()
			and requirement.dependencies.isEmpty()
		)
	to 
		actor : UC!Actor (
			name <- requirement.title
		)
}

rule RequirementWithUseCaseCommentToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithComment()
			and requirement.dependencies.isEmpty()
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
}

rule RequirementWithoutCommentsToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithoutComment()
			and requirement.dependencies.isEmpty() -- this is to prevent transformation match with rules: RequirementWithUseCaseWithoutCommentAndUseCaseDependencyToUseCaseWithInclusion
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
}

rule RequirementWithActorCommentAndUseCaseDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.isActor()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isUseCase()
		)
	to 
		association : UC!Association (
			name <- requirement.title + '_' + requirement.dependencies.first().title,
			usecase <- requirement.dependencies.first()
		)
}

rule RequirementWithUseCaseAndActorDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.isUseCase()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isActor()
		)
	to 
		association : UC!Association (
			name <- requirement.dependencies.first().title + '_' + requirement.title,
			actor <- requirement.dependencies.first(),
			usecase <- requirement
		)
}

rule InclusionRequirementToInclusionUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseInclusion
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- Set{_include}
		),
		_include : UC!Include (
			name <- requirement.title + '_' + requirement.dependencies.first().title,
			usecase <- requirement.dependencies.first()
		)
}
