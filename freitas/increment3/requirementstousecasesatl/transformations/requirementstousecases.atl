-- @atlcompiler emftvm
-- @path UC=/pt.isep.edom.usecases2/model/usecases2.ecore
-- @path RQ=/requirements/model/requirements.ecore

module requirementstousecases;
create UseCases : UC from Requirements : RQ;

helper def : allFunctionalRequirements(): Set(RQ!Requirement) = 
	RQ!Requirement
	.allInstances()
	-> select(requirement | requirement.type = #FUNCTIONAL);
	

helper context RQ!Requirement def : isUseCaseWithoutComment() : Boolean = 
	self.comments.isEmpty();

helper context RQ!Requirement def : isUseCaseWithComment() : Boolean = 
	not self.comments.isEmpty()
	and self.comments.first().subject = 'UseCase';

helper context RQ!Requirement def : isUseCase() : Boolean = 
	self.isUseCaseWithoutComment()
	or self.isUseCaseWithoutComment();

helper context RQ!Requirement def : isActor() : Boolean = 
	not self.comments.isEmpty()
	and self.comments.first().subject = 'Actor';
	


rule ModelToUseCaseModel {
	from
		model : RQ!Model
	to 
		use_case_model : UC!UseCaseModel (
			usecase <- thisModule.allFunctionalRequirements()
		)
}

rule RequirementWithActorCommentToActor {
	from
		requirement : RQ!Requirement(
			requirement.isActor()
		)
	to 
		actor : UC!Actor (
			name <- requirement.title
		)
}

rule RequirementWithUseCaseCommentToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithComment()
			and requirement.dependencies.isEmpty()
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
}

rule RequirementWithoutCommentsToUseCase {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithoutComment()
			and requirement.dependencies.isEmpty() -- this is to prevent transformation match with rules: RequirementWithUseCaseWithoutCommentAndUseCaseDependencyToUseCaseWithInclusion
		)
	to 
		use_case : UC!UseCase (
			name <- requirement.title
		)
}

rule RequirementWithActorCommentAndUseCaseDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.isActor()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isUseCase()
		)
	to 
		association : UC!Association (
			name <- requirement.title + '_' + requirement.dependencies.first().title,
			actor <- requirement,
			usecase <- requirement.dependencies.first()
		)
}

rule RequirementWithUseCaseAndActorDependencyToAssociation {
	from
		requirement : RQ!Requirement(
			requirement.isUseCase()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isActor()
		)
	to 
		association : UC!Association (
			name <- requirement.dependencies.first().title + '_' + requirement.title,
			actor <- requirement.dependencies.first(),
			usecase <- requirement
		)
}

-- no comment comment
rule RequirementWithUseCaseWithoutCommentAndUseCaseWithCommentDependencyToUseCaseWithInclusion {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithoutComment()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isUseCaseWithComment()
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- Set{requirement.dependencies.first()}
		)
}

-- no comment no comment
rule RequirementWithUseCaseWithoutCommentAndUseCaseWithoutCommentDependencyToUseCaseWithInclusion {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithoutComment()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isUseCaseWithoutComment()
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- Set{requirement.dependencies.first()}
		)
}

-- comment comment
rule RequirementWithUseCaseCommentAndUseCaseCommentDependencyToUseCaseWithInclusion {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithComment()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isUseCaseWithComment()
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- Set{requirement.dependencies.first()}
		)
}

-- comment no comment
rule RequirementWithUseCaseCommentAndUseCaseWithoutCommentDependencyToUseCaseWithInclusion {
	from
		requirement : RQ!Requirement(
			requirement.isUseCaseWithComment()
			and not requirement.dependencies.isEmpty()
			and requirement.dependencies.first().isUseCaseWithoutComment()
		)
	to 
		use_case_with_inclusion : UC!UseCase (
			name <- requirement.title,
			include <- Set{requirement.dependencies.first()}
		)
}