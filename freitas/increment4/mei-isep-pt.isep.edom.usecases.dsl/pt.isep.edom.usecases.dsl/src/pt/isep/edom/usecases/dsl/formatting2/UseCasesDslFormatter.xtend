/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.usecases.dsl.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import pt.isep.edom.usecases.Actor
import pt.isep.edom.usecases.Association
import pt.isep.edom.usecases.Extend
import pt.isep.edom.usecases.Include
import pt.isep.edom.usecases.UseCase
import pt.isep.edom.usecases.UseCaseModel
import pt.isep.edom.usecases.dsl.services.UseCasesDslGrammarAccess

class UseCasesDslFormatter extends AbstractFormatter2 {
	
	@Inject extension UseCasesDslGrammarAccess

	def dispatch void format(UseCaseModel useCaseModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Actor actor : useCaseModel.getActor()) {
			actor.format;
		}
		for (Association association : useCaseModel.getAssociation()) {
			association.format;
		}
		for (UseCase useCase : useCaseModel.getUsecase()) {
			useCase.format;
		}
	}

	def dispatch void format(UseCase useCase, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Extend extend : useCase.getExtend()) {
			extend.format;
		}
		for (Include include : useCase.getInclude()) {
			include.format;
		}
	}
	
	// TODO: implement for 
}
