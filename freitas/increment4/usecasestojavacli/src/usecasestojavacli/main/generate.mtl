[comment encoding = UTF-8 /]
[module generate('http://www.example.org/usecases')]

[query public isActorAssociation(parm1: UseCaseModel, parm2: Actor) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsActorAssociation(pt.isep.edom.usecases.UseCaseModel, pt.isep.edom.usecases.Actor)', Sequence{parm1, parm2})
/]

[query public getActorAssociations(parm1: UseCaseModel, parm2: Actor) : Sequence(Association) =
	invoke('usecasestojavacli.main.JavaQuerier', 'GetActorAssociations(pt.isep.edom.usecases.UseCaseModel, pt.isep.edom.usecases.Actor)', Sequence{parm1, parm2})
/]

[query public isCRUDUseCase(parm1: UseCase) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsCRUDUseCase(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[query public isIncludeUseCase(parm1: UseCase) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsIncludeUseCase(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[query public getIncludedUseCases(parm1: UseCase) : Sequence(Include) =
	invoke('usecasestojavacli.main.JavaQuerier', 'GetIncludedUseCases(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[template public generateElement(anUseCaseModel : UseCaseModel)]
[comment @main/]
[file (anUseCaseModel.toString(), false, 'UTF-8')]

[/file]

[generateActorInterface(anUseCaseModel)/]
[for (actor : Actor | Actor.allInstances())]

	[if (not isActorAssociation(anUseCaseModel, actor))]
		[generateActorImpl(actor)/]
	[else]
		[generateActorWithAssociationsImpl(anUseCaseModel, actor)/]
	[/if]

[/for]

[generateUseCaseInterface(anUseCaseModel)/]
[for (useCase : UseCase | UseCase.allInstances())]

	[if (not isCRUDUseCase(useCase))]

		[if (isIncludeUseCase(useCase))]
			[generateIncludeUseCaseImpl(useCase)/]
		[else]
			[generateUseCaseImpl(useCase)/]
		[/if]
	[else]
		[generateCRUDUseCaseImpl(anUseCaseModel, useCase)/]
	[/if]

[/for]

[/template]





[template public generateActorInterface(aType : UseCaseModel)]
[file ('Actor.java', false, 'UTF-8')]

public interface Actor {
	public void execute();
}

[/file]
[/template]

[template public generateUseCaseInterface(aType : UseCaseModel)]
[file ('UseCase.java', false, 'UTF-8')]

public interface UseCase {
	public void execute();
}

[/file]
[/template]






[template public generateActorImpl(aType : Actor)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

class [aType.name.replaceAll('\\s+', '')/] implements Actor {
	public void execute() {

		System.out.println("I'm currently not associated with any use cases :( Maybe you can talk with stakeholders to give me a task? :)");
	}
}

[/file]
[/template]

[template public generateActorWithAssociationsImpl(useCaseModel : UseCaseModel, aType : Actor)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

class [aType.name.replaceAll('\\s+', '')/] implements Actor {
	public void execute() {

		boolean exit=false;

		java.util.Scanner in = new java.util.Scanner(System.in);

		while (!exit) {

			System.out.println("Hello I'm Actor «[aType.name/]», what can I do for you today?");

			[let associations : Sequence(Association) = getActorAssociations(useCaseModel, aType)]
				[for (association: Association | associations)]
			System.out.println("[associations->indexOf(association)/]-[association.usecase.name/]");
				[/for]
			[/let]
			System.out.println("0-Exit");

			System.out.println(">>Please enter you option");

			// Read an integer from the input
			int num = in.nextInt();

			switch (num) {
			[let associations : Sequence(Association) = getActorAssociations(useCaseModel, aType)]
				[for (association: Association | associations)]
			case [associations->indexOf(association)/]:
				{
					[association.usecase.name.replaceAll('\\s+', '')/] o = FFactory.getInstance().create[association.usecase.name.replaceAll('\\s+', '')/]();
					o.execute();
				}
				break;
				[/for]
			[/let]
			case 0:
				exit=true;
			}
		}
	}
}

[/file]
[/template]






[template public generateUseCaseImpl(aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		System.out.println("I currently do not provide any functional operations! Check again later");
	}
}

[/file]
[/template]

[template public generateIncludeUseCaseImpl(aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		[let includedUseCases : Sequence(Include) = getIncludedUseCases(aType)]
			[for (include : Include | includedUseCases)]
		[include.usecase.name.replaceAll('\\s+', '')/] o = FFactory.getInstance().create[include.usecase.name.replaceAll('\\s+', '')/]();
		o.execute();
			[/for]
		[/let]

	}
}

[/file]
[/template]

[template public generateCRUDUseCaseImpl(useCaseModel : UseCaseModel, aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		boolean exit=false;

		java.util.Scanner in = new java.util.Scanner(System.in);

		String['['/][']'/] operations = new String['['/][']'/]{"1- Create", "2- Read", "3- Update", "4- Delete"};

		while (!exit) {

			System.out.println("I currently provide the following operations:");

			for(String operation : operations){
				System.out.println(operation);
			}

			System.out.println("0-Exit");

			System.out.println(">>Please select the operation you would like to execute");

			// Read an integer from the input
			int num = in.nextInt();

			if(num <= operations.length){
				if(num == 0){
					exit = true;
				}else{
					System.out.println(operations['['/]num - 1[']'/]);
				}
			}else{
				System.out.println("Whoopsie... I do not recognize that operation!");
			}
		}
	}
}

[/file]
[/template]