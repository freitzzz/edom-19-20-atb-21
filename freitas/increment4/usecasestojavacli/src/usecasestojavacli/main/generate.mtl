[comment encoding = UTF-8 /]
[module generate('http://www.example.org/usecases')]

[query public isActorAssociation(parm1: UseCaseModel, parm2: Actor) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsActorAssociation(pt.isep.edom.usecases.UseCaseModel, pt.isep.edom.usecases.Actor)', Sequence{parm1, parm2})
/]

[query public getActorAssociations(parm1: UseCaseModel, parm2: Actor) : Sequence(Association) =
	invoke('usecasestojavacli.main.JavaQuerier', 'GetActorAssociations(pt.isep.edom.usecases.UseCaseModel, pt.isep.edom.usecases.Actor)', Sequence{parm1, parm2})
/]

[query public isCRUDUseCase(parm1: UseCase) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsCRUDUseCase(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[query public isIncludeUseCase(parm1: UseCase) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsIncludeUseCase(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[query public getIncludedUseCases(parm1: UseCase) : Sequence(Include) =
	invoke('usecasestojavacli.main.JavaQuerier', 'GetIncludedUseCases(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[query public isEntityUseCase(parm1: UseCase) : Boolean =
	invoke('usecasestojavacli.main.JavaQuerier', 'IsEntityUseCase(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[query public getUseCaseEntityName(parm1: UseCase) : String =
	invoke('usecasestojavacli.main.JavaQuerier', 'GetEntityUseCaseName(pt.isep.edom.usecases.UseCase)', Sequence{parm1})
/]

[template public generateElement(anUseCaseModel : UseCaseModel)]
[comment @main/]
[file ('Main.java', false, 'UTF-8')]

public class Main {

	public static void main(String['[]'/] args){

		System.out.println("Welcome to Use Cases Slight CLI!\nWhich actor do you want to interact with ?");

		boolean exit=false;

		java.util.Scanner in = new java.util.Scanner(System.in);

		while (!exit) {

			[let actors : Sequence(Actor) = Actor.allInstances() -> asSequence()]
				[for (actor: Actor | actors)]
			System.out.println("[actors->indexOf(actor)/]-[actor.name/]");
				[/for]
			[/let]
			System.out.println("0-Exit");

			// Read an integer from the input
			int num = in.nextInt();

			switch (num) {
			[let actors : Sequence(Actor) = Actor.allInstances() -> asSequence()]
				[for (actor: Actor | actors)]
			case [actors->indexOf(actor)/]:
				{
					Actor o = FFactory.getInstance().create[actor.name.replaceAll('\\s+', '')/]();
					o.execute();
				}
				break;
				[/for]
			[/let]
			case 0:
				exit=true;
			}
		}

	}

}

[/file]

[generateFactoryInterface(anUseCaseModel)/]

[generateFactoryImpl(anUseCaseModel)/]

[generateFactorySingleton(anUseCaseModel)/]



[generateRepositoryInterface(anUseCaseModel)/]

[generateEntityInterface(anUseCaseModel)/]

[generateActorInterface(anUseCaseModel)/]
[for (actor : Actor | Actor.allInstances())]

	[if (not isActorAssociation(anUseCaseModel, actor))]
		[generateActorImpl(actor)/]
	[else]
		[generateActorWithAssociationsImpl(anUseCaseModel, actor)/]
	[/if]

[/for]

[generateUseCaseInterface(anUseCaseModel)/]
[for (useCase : UseCase | UseCase.allInstances())]

	[if (not isCRUDUseCase(useCase))]

		[if (isIncludeUseCase(useCase))]
			[generateIncludeUseCaseImpl(useCase)/]
		[else]
			[generateUseCaseImpl(useCase)/]
		[/if]
	[else]

		[if (isEntityUseCase(useCase))]

			[generateEntityRepositoryInterface(getUseCaseEntityName(useCase))/]

			[generateRepositoryImpl(getUseCaseEntityName(useCase))/]

			[generateEntityImpl(getUseCaseEntityName(useCase))/]

			[generateCRUDEntityUseCaseImpl(anUseCaseModel, useCase)/]
		[else]
			[generateCRUDUseCaseImpl(anUseCaseModel, useCase)/]
		[/if]
	[/if]

[/for]

[/template]






[template public generateFactoryInterface(useCaseModel : UseCaseModel)]
[file ('Factory.java', false, 'UTF-8')]

public interface Factory {

	[for (actor: Actor | useCaseModel.actor)]
	public Actor create[actor.name.replaceAll('\\s+', '')/]();

	[/for]

	[for (useCase: UseCase | useCaseModel.usecase)]
	public UseCase create[useCase.name.replaceAll('\\s+', '')/]();

	[/for]

	[for (useCase: UseCase | useCaseModel.usecase)]
		[if (isEntityUseCase(useCase))]
			[let entityName : String = getUseCaseEntityName(useCase)]
	public Entity create[entityName.replaceAll('\\s+', '')/](int id, String name);

			[/let]
		[/if]
	[/for]

	[for (useCase: UseCase | useCaseModel.usecase)]
		[if (isEntityUseCase(useCase))]
			[let entityName : String = getUseCaseEntityName(useCase)]
	public [entityName.replaceAll('\\s+', '')/]Repository create[entityName.replaceAll('\\s+', '')/]Repository();

			[/let]
		[/if]
	[/for]
	
}
[/file]
[/template]

[template public generateFactoryImpl(useCaseModel : UseCaseModel)]
[file ('FactoryImpl.java', false, 'UTF-8')]

public class FactoryImpl implements Factory {

	[for (actor: Actor | useCaseModel.actor)]
	public Actor create[actor.name.replaceAll('\\s+', '')/](){
		return new [actor.name.replaceAll('\\s+', '')/]();
	}

	[/for]

	[for (useCase: UseCase | useCaseModel.usecase)]
	public UseCase create[useCase.name.replaceAll('\\s+', '')/](){
		return new [useCase.name.replaceAll('\\s+', '')/]();
	}

	[/for]

	[for (useCase: UseCase | useCaseModel.usecase)]
		[if (isEntityUseCase(useCase))]
			[let entityName : String = getUseCaseEntityName(useCase)]
	public Entity create[entityName.replaceAll('\\s+', '')/](int id, String name){
		return new [entityName.replaceAll('\\s+', '')/](name, id);
	}

			[/let]
		[/if]
	[/for]

	[for (useCase: UseCase | useCaseModel.usecase)]
		[if (isEntityUseCase(useCase))]
			[let entityName : String = getUseCaseEntityName(useCase)]
	public [entityName.replaceAll('\\s+', '')/]Repository create[entityName.replaceAll('\\s+', '')/]Repository(){
		return new [entityName.replaceAll('\\s+', '')/]RepositoryImpl();
	}

			[/let]
		[/if]
	[/for]
	
}
[/file]
[/template]






[template public generateFactorySingleton(useCaseModel : UseCaseModel)]
[file ('FFactory.java', false, 'UTF-8')]

/**
 * @generated NOT
 */
public class FFactory {

	private static Factory instance=null;

	public static Factory getInstance() {
		if (instance==null) {
			instance=new FactoryImpl();
		}
		return instance;
	}
}
[/file]
[/template]






[template public generateRepositoryInterface(aType : UseCaseModel)]
[file ('Repository.java', false, 'UTF-8')]

public interface Repository<Entity, ID> {

	public Entity save(Entity entity);

	public Entity find(ID id);

	public Entity update(Entity entity);

	public boolean delete(ID id);

	public long count();

}

[/file]
[/template]






[template public generateEntityRepositoryInterface(entityName : String)]
[file (entityName.replaceAll('\\s+', '')+'Repository.java', false, 'UTF-8')]

public interface [entityName.replaceAll('\\s+', '')/]Repository extends Repository<[entityName.replaceAll('\\s+', '')/], Integer> {

}

[/file]
[/template]






[template public generateEntityInterface(aType : UseCaseModel)]
[file ('Entity.java', false, 'UTF-8')]

public interface Entity {

	public int id();

	public String name();

	public void changeName(String name);
}

[/file]
[/template]

[template public generateActorInterface(aType : UseCaseModel)]
[file ('Actor.java', false, 'UTF-8')]

public interface Actor {
	public void execute();
}

[/file]
[/template]

[template public generateUseCaseInterface(aType : UseCaseModel)]
[file ('UseCase.java', false, 'UTF-8')]

public interface UseCase {
	public void execute();
}

[/file]
[/template]






[template public generateRepositoryImpl(aType : String)]
[file (aType.replaceAll('\\s+', '')+'RepositoryImpl.java', false, 'UTF-8')]

import java.util.HashMap;

public class [aType.replaceAll('\\s+', '')/]RepositoryImpl implements [aType.replaceAll('\\s+', '')/]Repository {

	private static HashMap<Integer, [aType.replaceAll('\\s+', '')/]> entities = new HashMap<>();

	public [aType.replaceAll('\\s+', '')/] save([aType.replaceAll('\\s+', '')/] entity){
		
		entities.put(entity.id(), entity);

		return entity;
	}

	public [aType.replaceAll('\\s+', '')/] find(Integer id){

		return entities.get(id);

	}

	public [aType.replaceAll('\\s+', '')/] update([aType.replaceAll('\\s+', '')/] entity){

		entities.remove(entity.id());

		entities.put(entity.id(), entity);

		return entity;

	}

	public boolean delete(Integer id){

		return entities.remove(id) != null;

	}

	public long count(){

		return entities.size();

	}

}

[/file]
[/template]






[template public generateEntityImpl(aType : String)]
[file (aType.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

public class [aType.replaceAll('\\s+', '')/] implements Entity {
	
	
	private int _id;

	private String _name;

	
	public [aType.replaceAll('\\s+', '')/] (String name, int id){

		_id = id;
		_name = name;

	}

	public int id () { return _id; }

	public String name () { return _name; }

	public void changeName (String name) { this._name = name; }

	public String toString(){

		return new StringBuilder()
			.append("[aType.replaceAll('\\s+', '')/]{")
			.append("ID: ")
			.append(id())
			.append(" | ")
			.append("Name: ")
			.append(name())
			.append("}")
			.toString();
	}


}

[/file]
[/template]






[template public generateActorImpl(aType : Actor)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

public class [aType.name.replaceAll('\\s+', '')/] implements Actor {
	public void execute() {

		System.out.println("I'm currently not associated with any use cases :( Maybe you can talk with stakeholders to give me a task? :)");
	}
}

[/file]
[/template]

[template public generateActorWithAssociationsImpl(useCaseModel : UseCaseModel, aType : Actor)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

public class [aType.name.replaceAll('\\s+', '')/] implements Actor {
	public void execute() {

		boolean exit=false;

		java.util.Scanner in = new java.util.Scanner(System.in);

		while (!exit) {

			System.out.println("Hello I'm Actor «[aType.name/]», what can I do for you today?");

			[let associations : Sequence(Association) = getActorAssociations(useCaseModel, aType)]
				[for (association: Association | associations)]
			System.out.println("[associations->indexOf(association)/]-[association.usecase.name/]");
				[/for]
			[/let]
			System.out.println("0-Exit");

			System.out.println(">>Please enter you option");

			// Read an integer from the input
			int num = in.nextInt();

			switch (num) {
			[let associations : Sequence(Association) = getActorAssociations(useCaseModel, aType)]
				[for (association: Association | associations)]
			case [associations->indexOf(association)/]:
				{
					UseCase o = FFactory.getInstance().create[association.usecase.name.replaceAll('\\s+', '')/]();
					o.execute();
				}
				break;
				[/for]
			[/let]
			case 0:
				exit=true;
			}
		}
	}
}

[/file]
[/template]






[template public generateUseCaseImpl(aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

/**
 * @generated NOT
 */
public class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		System.out.println("I currently do not provide any functional operations! Check again later");
	}
}

[/file]
[/template]

[template public generateIncludeUseCaseImpl(aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

public class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		[let includedUseCases : Sequence(Include) = getIncludedUseCases(aType)]
			[for (include : Include | includedUseCases)]
		UseCase o = FFactory.getInstance().create[include.usecase.name.replaceAll('\\s+', '')/]();
		o.execute();
			[/for]
		[/let]

	}
}

[/file]
[/template]

[template public generateCRUDUseCaseImpl(useCaseModel : UseCaseModel, aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

public class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		boolean exit=false;

		java.util.Scanner in = new java.util.Scanner(System.in);

		String['['/][']'/] operations = new String['['/][']'/]{"1- Create", "2- Read", "3- Update", "4- Delete"};

		while (!exit) {

			System.out.println("I currently provide the following operations:");

			for(String operation : operations){
				System.out.println(operation);
			}

			System.out.println("0-Exit");

			System.out.println(">>Please select the operation you would like to execute");

			// Read an integer from the input
			int num = in.nextInt();

			if(num <= operations.length){
				if(num == 0){
					exit = true;
				}else{
					System.out.println(operations['['/]num - 1[']'/]);
				}
			}else{
				System.out.println("Whoopsie... I do not recognize that operation!");
			}
		}
	}
}

[/file]
[/template]

[template public generateCRUDEntityUseCaseImpl(useCaseModel : UseCaseModel, aType : UseCase)]
[file (aType.name.replaceAll('\\s+', '')+'.java', false, 'UTF-8')]

public class [aType.name.replaceAll('\\s+', '')/] implements UseCase {
	public void execute() {

		boolean exit=false;

		java.util.Scanner in = new java.util.Scanner(System.in);

		[let entityName : String = getUseCaseEntityName(aType)]
		String['['/][']'/] operations = new String['['/][']'/]{
			"1- Create [entityName/]", 
			"2- Read [entityName/]", 
			"3- Update [entityName/]", 
			"4- Delete [entityName/]"
		};
		

		while (!exit) {

			System.out.println("I currently provide the following operations:");

			for(String operation : operations){
				System.out.println(operation);
			}

			System.out.println("0-Exit");

			System.out.println(">>Please select the operation you would like to execute");

			// Read an integer from the input
			int num = in.nextInt();

			if(num <= operations.length){
				if(num == 0){
					exit = true;
				}else{

					[entityName.replaceAll('\\s+', '')/]Repository o = FFactory.getInstance().create[entityName.replaceAll('\\s+', '')/]Repository();

					switch(num){
						case 1:
							System.out.println("What should be the name of the [entityName/] ?");

							in.nextLine();

							String cname = in.nextLine();

							int cid = (int)o.count() + 1;

							[entityName.replaceAll('\\s+', '')/] centity = ([entityName.replaceAll('\\s+', '')/])FFactory.getInstance().create[entityName.replaceAll('\\s+', '')/](cid, cname);

							[entityName.replaceAll('\\s+', '')/] createdEntity = o.save(centity);

							System.out.println("The [entityName/] was created successfully! Here's its details: " + createdEntity);

							break;
						case 2:
							System.out.println("What is the identifier of the [entityName/] ?");

							int fid = in.nextInt();

							[entityName.replaceAll('\\s+', '')/] foundEntity = o.find(fid);

							if(foundEntity != null){
								System.out.println("Here's the details of the [entityName/]: " + foundEntity);
							}else{
								System.out.println("I couldn't find it! :(\n Maybe you inserted the wrong identifier?");
							}

							break;
						case 3:
							System.out.println("What is the identifier of the [entityName/] ?");

							int uid = in.nextInt();

							[entityName.replaceAll('\\s+', '')/] entityBeingUpdated = o.find(uid);

							if(entityBeingUpdated != null){
								
								System.out.println("What's the new name of the [entityName/] ?");

								in.nextLine();

								String uname = in.nextLine();

								entityBeingUpdated.changeName(uname);

								[entityName.replaceAll('\\s+', '')/] updatedEntity = o.update(entityBeingUpdated);

								System.out.println("The [entityName/] was updated successfully! Here's its updated details: " + updatedEntity);

							}else{
								System.out.println("I couldn't find it! :(\n Maybe you inserted the wrong identifier?");
							}

							break;
						default:
							System.out.println("What is the identifier of the [entityName/] ?");

							int did = in.nextInt();

							boolean deleted = o.delete(did);

							if(deleted){

								System.out.println("The [entityName/] was deleted successfully");

							}else{
								System.out.println("I couldn't find it! :(\n Maybe you inserted the wrong identifier?");
							}

							break;
					}

				}
			}else{
				System.out.println("Whoopsie... I do not recognize that operation!");
			}
		}

		[/let]

	}
}

[/file]
[/template]