/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.project.c1.dsl.nav.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import pt.isep.edom.project.c1.dsl.nav.services.NavGrammarAccess;
import pt.isep.edom.project.c1.mm.nav.Menu;
import pt.isep.edom.project.c1.mm.nav.NavModel;
import pt.isep.edom.project.c1.mm.nav.NavPackage;
import pt.isep.edom.project.c1.mm.nav.Page;

@SuppressWarnings("all")
public class NavSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NavGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == NavPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case NavPackage.MENU:
				sequence_Menu(context, (Menu) semanticObject); 
				return; 
			case NavPackage.NAV_MODEL:
				sequence_NavModel(context, (NavModel) semanticObject); 
				return; 
			case NavPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Menu returns Menu
	 *
	 * Constraint:
	 *     (name=EString (pages+=Page pages+=Page*)?)
	 */
	protected void sequence_Menu(ISerializationContext context, Menu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NavModel returns NavModel
	 *
	 * Constraint:
	 *     (name=EString menu=Menu?)
	 */
	protected void sequence_NavModel(ISerializationContext context, NavModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NavPackage.Literals.PAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NavPackage.Literals.PAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPageAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
