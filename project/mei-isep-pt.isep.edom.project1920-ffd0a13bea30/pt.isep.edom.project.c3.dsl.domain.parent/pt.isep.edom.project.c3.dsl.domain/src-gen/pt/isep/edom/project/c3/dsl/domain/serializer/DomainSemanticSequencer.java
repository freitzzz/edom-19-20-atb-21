/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.project.c3.dsl.domain.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import pt.isep.edom.project.c3.dsl.domain.services.DomainGrammarAccess;
import pt.isep.edom.project.c3.mm.domain.DomainModel;
import pt.isep.edom.project.c3.mm.domain.DomainPackage;
import pt.isep.edom.project.c3.mm.domain.Entity;
import pt.isep.edom.project.c3.mm.domain.Field;
import pt.isep.edom.project.c3.mm.domain.Reference;
import pt.isep.edom.project.c3.mm.domain.SubEntity;

@SuppressWarnings("all")
public class DomainSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DomainGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DomainPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainPackage.DOMAIN_MODEL:
				sequence_DomainModel(context, (DomainModel) semanticObject); 
				return; 
			case DomainPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case DomainPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case DomainPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case DomainPackage.SUB_ENTITY:
				sequence_SubEntity(context, (SubEntity) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DomainModel returns DomainModel
	 *
	 * Constraint:
	 *     (name=EString (entities+=Entity entities+=Entity*)?)
	 */
	protected void sequence_DomainModel(ISerializationContext context, DomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString (fields+=Field fields+=Field*)? (subentities+=SubEntity subentities+=SubEntity*)? (references+=Reference references+=Reference*)?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=EString type=FieldType?)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (name=EString upperBound=EInt? entity=[Entity|EString]?)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubEntity returns SubEntity
	 *
	 * Constraint:
	 *     (name=EString upperBound=EInt? entity=[Entity|EString]?)
	 */
	protected void sequence_SubEntity(ISerializationContext context, SubEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
