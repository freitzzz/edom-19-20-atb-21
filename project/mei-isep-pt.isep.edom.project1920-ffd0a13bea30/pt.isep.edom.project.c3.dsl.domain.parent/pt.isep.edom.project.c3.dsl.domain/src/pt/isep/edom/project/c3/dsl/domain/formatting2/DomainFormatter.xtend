/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.project.c3.dsl.domain.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import pt.isep.edom.project.c3.dsl.domain.services.DomainGrammarAccess
import pt.isep.edom.project.c3.mm.domain.DomainModel
import pt.isep.edom.project.c3.mm.domain.Entity
import pt.isep.edom.project.c3.mm.domain.Field
import pt.isep.edom.project.c3.mm.domain.Reference
import pt.isep.edom.project.c3.mm.domain.SubEntity

class DomainFormatter extends AbstractFormatter2 {
	
	@Inject extension DomainGrammarAccess

	def dispatch void format(DomainModel domainModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Entity entity : domainModel.getEntities()) {
			entity.format;
		}
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Field field : entity.getFields()) {
			field.format;
		}
		for (SubEntity subEntity : entity.getSubentities()) {
			subEntity.format;
		}
		for (Reference reference : entity.getReferences()) {
			reference.format;
		}
	}
	
	// TODO: implement for 
}
