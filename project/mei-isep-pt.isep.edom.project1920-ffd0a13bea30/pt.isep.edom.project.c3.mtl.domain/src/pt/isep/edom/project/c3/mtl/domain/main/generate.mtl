[comment encoding = UTF-8 /]
[module generate('http://www.example.org/domain')]


[template public generateDomainModel(aDomainModel : DomainModel)]
[comment @main/]
[file ('domain/'+aDomainModel.name+'.java', false, 'UTF-8')]
package domain;

class [aDomainModel.name/] {
}
[/file]

[generateFactoryInterface(aDomainModel)/]

[generateFactoryImpl(aDomainModel)/]

[generateFactorySingleton(aDomainModel)/]

[generateEntityInterface(aDomainModel)/]

[for (entity : Entity | aDomainModel.entities)]
	[generateSpecificEntityInterface(entity)/]
	[generateSpecificEntityInterfaceImpl(entity)/]
[/for]

[/template]


[template public generateFactoryInterface(domainModel : DomainModel)]
[file ('domain/Factory.java', false, 'UTF-8')]

package domain;

public interface Factory {

	[for (entity: Entity | domainModel.entities)]
	public Entity create[entity.name.replaceAll('\\s+', '')/]();

	[/for]
	
}
[/file]
[/template]


[template public generateFactoryImpl(domainModel : DomainModel)]
[file ('domain/FactoryImpl.java', false, 'UTF-8')]

package domain;

public class FactoryImpl implements Factory {

	[for (entity: Entity | domainModel.entities)]
	public Entity create[entity.name.replaceAll('\\s+', '')/](){
		return new [entity.name.replaceAll('\\s+', '')/]Impl();
	}

	[/for]
	
}
[/file]
[/template]


[template public generateFactorySingleton(domainModel : DomainModel)]
[file ('domain/FFactory.java', false, 'UTF-8')]

package domain;

/**
 * @generated NOT
 */
public class FFactory {

	private static Factory instance=null;

	public static Factory getInstance() {
		if (instance==null) {
			instance=new FactoryImpl();
		}
		return instance;
	}
}
[/file]
[/template]


[template public generateEntityInterface(aType : DomainModel)]
[file ('domain/Entity.java', false, 'UTF-8')]

package domain;

public interface Entity {

	public Integer id();

	public String name();
}

[/file]
[/template]


[template public generateSpecificEntityInterface(aType : Entity)]
[file ('domain/' + aType.name.replaceAll('\\s+', '') + '.java', false, 'UTF-8')]

package domain;

[if (aType.references -> notEmpty() or aType.subentities -> notEmpty())]
import java.util.List;
[/if]

public interface [aType.name.replaceAll('\\s+', '')/] extends Entity {

	[for (field : Field | aType.fields)]

	[if (field.type = FieldType::REAL)]
	public Double [field.name/]();
	[else]
	public [field.type.toString().toLower().toUpperFirst()/] [field.name/]();		
	[/if]

	[/for]

	[for (subEntity : SubEntity | aType.subentities)]

	[if (subEntity.upperBound = 1)]
	public [subEntity.entity.name.replaceAll('\\s+', '')/] [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/]();
	[else]
	public List<[subEntity.entity.name.replaceAll('\\s+', '')/]> [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/]s();	
	[/if]
		
	[/for]

	[for (reference : Reference | aType.references)]

	[if (reference.upperBound = 1)]
	public [reference.entity.name.replaceAll('\\s+', '')/] [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/]();
	[else]
	public List<[reference.entity.name.replaceAll('\\s+', '')/]> [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/]s();	
	[/if]
		
	[/for]

}

[/file]
[/template]


[template public generateSpecificEntityInterfaceImpl(aType : Entity)]
[file ('domain/' + aType.name.replaceAll('\\s+', '') + 'Impl.java', false, 'UTF-8')]

package domain;

[if (aType.references -> notEmpty() or aType.subentities -> notEmpty())]
import java.util.List;
import java.util.ArrayList;
[/if]

public class [aType.name.replaceAll('\\s+', '')/]Impl implements [aType.name.replaceAll('\\s+', '')/] {

	[for (field : Field | aType.fields)]
		[if (field.type = FieldType::REAL)]
	private Double [field.name/];
		[else]
	private [field.type.toString().toLower().toUpperFirst()/] [field.name/];
		[/if]
	[/for]

	[for (subEntity : SubEntity | aType.subentities)]

	[if (subEntity.upperBound = 1)]
	private [subEntity.entity.name.replaceAll('\\s+', '')/] [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/];
	[else]
	private List<[subEntity.entity.name.replaceAll('\\s+', '')/]> [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/]s;	
	[/if]
		
	[/for]

	[for (reference : Reference | aType.references)]
		[if (reference.upperBound = 1)]
	private [reference.entity.name.replaceAll('\\s+', '')/] [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/];
		[else]
	private List<[reference.entity.name.replaceAll('\\s+', '')/]> [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/]s;	
		[/if]
		
	[/for]

	[for (field : Field | aType.fields)]
		[if (field.type = FieldType::REAL)]
	public Double [field.name/](){return [field.name/];}
		[else]
	public [field.type.toString().toLower().toUpperFirst()/] [field.name/](){return [field.name/];}
		[/if]
	[/for]

	[for (subEntity : SubEntity | aType.subentities)]

	[if (subEntity.upperBound = 1)]
	public [subEntity.entity.name.replaceAll('\\s+', '')/] [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/](){return [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/];}
	[else]
	public List<[subEntity.entity.name.replaceAll('\\s+', '')/]> [subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/]s(){return new ArrayList<[subEntity.entity.name.replaceAll('\\s+', '')/]>([subEntity.entity.name.replaceAll('\\s+', '').toLowerCase()/]s);}
	[/if]
		
	[/for]

	[for (reference : Reference | aType.references)]

	[if (reference.upperBound = 1)]
	public [reference.entity.name.replaceAll('\\s+', '')/] [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/](){return [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/];}
	[else]
	public List<[reference.entity.name.replaceAll('\\s+', '')/]> [reference.entity.name.replaceAll('\\s+', '').toLowerCase()/]s(){return new ArrayList<[reference.entity.name.replaceAll('\\s+', '')/]>([reference.entity.name.replaceAll('\\s+', '').toLowerCase()/]s);}
	[/if]
		
	[/for]

}

[/file]
[/template]