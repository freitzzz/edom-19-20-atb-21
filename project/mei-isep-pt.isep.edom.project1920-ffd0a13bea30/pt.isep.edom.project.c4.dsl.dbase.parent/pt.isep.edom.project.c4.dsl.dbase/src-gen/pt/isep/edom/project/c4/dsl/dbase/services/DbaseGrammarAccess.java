/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.project.c4.dsl.dbase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DbaseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.DbaseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDbaseModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDbaseModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTablesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTablesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTablesTableParserRuleCall_4_2_0 = (RuleCall)cTablesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTablesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_4_3_1_0 = (RuleCall)cTablesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DbaseModel:
		//	{DbaseModel}
		//	'DbaseModel'
		//	name=EString
		//	'{' ('tables' '{' tables+=Table ("," tables+=Table)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DbaseModel} 'DbaseModel' name=EString '{' ('tables' '{' tables+=Table ("," tables+=Table)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{DbaseModel}
		public Action getDbaseModelAction_0() { return cDbaseModelAction_0; }
		
		//'DbaseModel'
		public Keyword getDbaseModelKeyword_1() { return cDbaseModelKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('tables' '{' tables+=Table ("," tables+=Table)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'tables'
		public Keyword getTablesKeyword_4_0() { return cTablesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//tables+=Table
		public Assignment getTablesAssignment_4_2() { return cTablesAssignment_4_2; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_4_2_0() { return cTablesTableParserRuleCall_4_2_0; }
		
		//("," tables+=Table)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//tables+=Table
		public Assignment getTablesAssignment_4_3_1() { return cTablesAssignment_4_3_1; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_4_3_1_0() { return cTablesTableParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEntityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEntityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntityEStringParserRuleCall_4_1_0 = (RuleCall)cEntityAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColumnsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cColumnsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cColumnsColumnParserRuleCall_5_2_0 = (RuleCall)cColumnsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cColumnsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_5_3_1_0 = (RuleCall)cColumnsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Table:
		//	{Table}
		//	'Table'
		//	name=EString
		//	'{' ('entity' entity=EString)? ('columns' '{' columns+=Column ("," columns+=Column)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Table} 'Table' name=EString '{' ('entity' entity=EString)? ('columns' '{' columns+=Column ("," columns+=Column)* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Table}
		public Action getTableAction_0() { return cTableAction_0; }
		
		//'Table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('entity' entity=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'entity'
		public Keyword getEntityKeyword_4_0() { return cEntityKeyword_4_0; }
		
		//entity=EString
		public Assignment getEntityAssignment_4_1() { return cEntityAssignment_4_1; }
		
		//EString
		public RuleCall getEntityEStringParserRuleCall_4_1_0() { return cEntityEStringParserRuleCall_4_1_0; }
		
		//('columns' '{' columns+=Column ("," columns+=Column)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'columns'
		public Keyword getColumnsKeyword_5_0() { return cColumnsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_2() { return cColumnsAssignment_5_2; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_2_0() { return cColumnsColumnParserRuleCall_5_2_0; }
		
		//("," columns+=Column)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_3_1() { return cColumnsAssignment_5_3_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_3_1_0() { return cColumnsColumnParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cKeyKeyKeyword_1_0 = (Keyword)cKeyAssignment_1.eContents().get(0);
		private final Keyword cColumnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTypeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeColumnTypeEnumRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForeignKeyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cForeignKeyAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cForeignKeyColumnParserRuleCall_6_2_0 = (RuleCall)cForeignKeyAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cForeignKeyAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cForeignKeyColumnParserRuleCall_6_3_1_0 = (RuleCall)cForeignKeyAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Column:
		//	{Column} key?='key'?
		//	'Column'
		//	name=EString
		//	'{' ('type' type=ColumnType)? ('foreignKey' '{' foreignKey+=Column ("," foreignKey+=Column)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Column} key?='key'? 'Column' name=EString '{' ('type' type=ColumnType)? ('foreignKey' '{' foreignKey+=Column (","
		//foreignKey+=Column)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }
		
		//key?='key'?
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//'key'
		public Keyword getKeyKeyKeyword_1_0() { return cKeyKeyKeyword_1_0; }
		
		//'Column'
		public Keyword getColumnKeyword_2() { return cColumnKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('type' type=ColumnType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'type'
		public Keyword getTypeKeyword_5_0() { return cTypeKeyword_5_0; }
		
		//type=ColumnType
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }
		
		//ColumnType
		public RuleCall getTypeColumnTypeEnumRuleCall_5_1_0() { return cTypeColumnTypeEnumRuleCall_5_1_0; }
		
		//('foreignKey' '{' foreignKey+=Column ("," foreignKey+=Column)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'foreignKey'
		public Keyword getForeignKeyKeyword_6_0() { return cForeignKeyKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//foreignKey+=Column
		public Assignment getForeignKeyAssignment_6_2() { return cForeignKeyAssignment_6_2; }
		
		//Column
		public RuleCall getForeignKeyColumnParserRuleCall_6_2_0() { return cForeignKeyColumnParserRuleCall_6_2_0; }
		
		//("," foreignKey+=Column)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//foreignKey+=Column
		public Assignment getForeignKeyAssignment_6_3_1() { return cForeignKeyAssignment_6_3_1; }
		
		//Column
		public RuleCall getForeignKeyColumnParserRuleCall_6_3_1_0() { return cForeignKeyColumnParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class ColumnTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.ColumnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVARCHAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVARCHARVARCHARKeyword_0_0 = (Keyword)cVARCHAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERINTEGERKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREALREALKeyword_2_0 = (Keyword)cREALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ColumnType:
		//	VARCHAR | INTEGER | REAL;
		public EnumRule getRule() { return rule; }
		
		//VARCHAR | INTEGER | REAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARCHAR
		public EnumLiteralDeclaration getVARCHAREnumLiteralDeclaration_0() { return cVARCHAREnumLiteralDeclaration_0; }
		
		//'VARCHAR'
		public Keyword getVARCHARVARCHARKeyword_0_0() { return cVARCHARVARCHARKeyword_0_0; }
		
		//INTEGER
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }
		
		//'INTEGER'
		public Keyword getINTEGERINTEGERKeyword_1_0() { return cINTEGERINTEGERKeyword_1_0; }
		
		//REAL
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_2() { return cREALEnumLiteralDeclaration_2; }
		
		//'REAL'
		public Keyword getREALREALKeyword_2_0() { return cREALREALKeyword_2_0; }
	}
	
	private final DbaseModelElements pDbaseModel;
	private final EStringElements pEString;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final ColumnTypeElements eColumnType;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DbaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDbaseModel = new DbaseModelElements();
		this.pEString = new EStringElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.eColumnType = new ColumnTypeElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pt.isep.edom.project.c4.dsl.dbase.Dbase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DbaseModel:
	//	{DbaseModel}
	//	'DbaseModel'
	//	name=EString
	//	'{' ('tables' '{' tables+=Table ("," tables+=Table)* '}')?
	//	'}';
	public DbaseModelElements getDbaseModelAccess() {
		return pDbaseModel;
	}
	
	public ParserRule getDbaseModelRule() {
		return getDbaseModelAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Table:
	//	{Table}
	//	'Table'
	//	name=EString
	//	'{' ('entity' entity=EString)? ('columns' '{' columns+=Column ("," columns+=Column)* '}')?
	//	'}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column:
	//	{Column} key?='key'?
	//	'Column'
	//	name=EString
	//	'{' ('type' type=ColumnType)? ('foreignKey' '{' foreignKey+=Column ("," foreignKey+=Column)* '}')?
	//	'}';
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//enum ColumnType:
	//	VARCHAR | INTEGER | REAL;
	public ColumnTypeElements getColumnTypeAccess() {
		return eColumnType;
	}
	
	public EnumRule getColumnTypeRule() {
		return getColumnTypeAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
