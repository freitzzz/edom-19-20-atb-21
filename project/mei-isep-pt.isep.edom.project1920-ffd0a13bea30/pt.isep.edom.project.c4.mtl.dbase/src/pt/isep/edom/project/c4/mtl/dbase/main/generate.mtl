[comment encoding = UTF-8 /]
[module generate('http://www.example.org/dbase', 'http://www.example.org/domain')]


[query public getDomainEntity(table: Table) : Entity =
	invoke('pt.isep.edom.project.c4.mtl.dbase.main.DomainModelQuery', 'getDomainEntity(pt.isep.edom.project.c4.mm.dbase.Table)', Sequence{table})
/]


[template public generateDbaseModel(aDbaseModel : DbaseModel) ? (true)]
[comment @main/]
[file ('persistence/Database.java', false, 'UTF-8')]
package persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class Database {

	// JDBC driver name and database URL
	static final String JDBC_DRIVER = "org.h2.Driver";
	static final String DB_URL = "jdbc:h2:~/test-gorgeous-food";

	// Database credentials
	static final String USER = "sa";
	static final String PASS = "";

	static Connection conn = null;

	private static void initDatabase() {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			String sql;
			[for (t: Table | aDbaseModel.tables)]
				sql = "CREATE TABLE IF NOT EXISTS [t.name/] ( ";

				[for (c: Column | t.columns)]
					sql += "[c.name + ' ' + c.type/], ";
				[/for]
				sql += " PRIMARY KEY ( ";
				[for (c: Column | t.columns)]
					[if (c.key)]
						sql += "[c.name/] ,";
					[/if]
				[/for]
				sql += ")";
				stmt.executeUpdate(sql);
			[/for]

			// Clean-up environment
			stmt.close();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
				se2.printStackTrace();
			} // nothing we can do
		} // end try
	}

	private static Connection initConnection() {
		try {
			// Register JDBC driver
			Class.forName(JDBC_DRIVER);

			// Open a connection
			conn = DriverManager.getConnection(DB_URL, USER, PASS);
			
			initDatabase();

		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
			return null;
		} catch (Exception e) {
			// Handle errors for Class.forName
			e.printStackTrace();
			return null;
		}

		return conn;
	}

	public static Connection getConnection() {
		if (conn == null) {
			conn = initConnection();
		}
		return conn;
	}

	public static void closeConnection() {
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException se) {
				// Handle errors for JDBC
				se.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				conn = null;
			}
		}
	}
}
[/file]
[for (t: Table | aDbaseModel.tables)]
	[generateTable(t, aDbaseModel)/]
[/for]
[/template]


[template public generateTable(aTable : Table, aDbaseModel : DbaseModel)]
[comment @main/]
[file ('persistence/'+aTable.name+'Repository.java', false, 'UTF-8')]
package persistence;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.ArrayList;

import domain.*;

public class [aTable.name + 'Repository'/] {
	public [aTable.name/] [aTable.name/]OfId(int id) {
		Statement stmt = null;
		[aTable.name/] [aTable.name.toLowerCase()/]=null;

		try {
			Connection conn=Database.getConnection();
	
			String sql = "SELECT * FROM [aTable.name/] WHERE id="
					+ id;
			stmt = conn.createStatement();

			stmt.executeQuery(sql);
			ResultSet res = stmt.getResultSet();
			if (res.next()) { 

				[aTable.name/]DTO dto = new [aTable.name/]DTO();

				dto.name = res.getString(1);
				dto.id = res.getInt(2);

				

				[aTable.name.toLowerCase()/] = ([aTable.name/])FFactory.getInstance().create[aTable.name/](dto);
			}

			stmt.close();
		} catch (SQLException se) {
			se.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
				se2.printStackTrace();
			}
		}     	
    	return [aTable.name.toLowerCase()/];
    }

	public int remove(int id) {
		Statement stmt = null;
		try {
			Connection conn=Database.getConnection();
			
			String sql = "DELETE FROM [aTable.name/] WHERE id="
					+ id;
			stmt = conn.createStatement();

			stmt.execute(sql);

			// Clean-up environment
			stmt.close();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
			return -1;
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
				se2.printStackTrace();
				return -1;
			} // nothing we can do
		} // end try      
		return 0;
    	
    }
    
    public int remove([aTable.name/] a[aTable.name/]) {
    	return remove(a[aTable.name/].id());
    }
    
    private int sqlInsert([aTable.name/] a[aTable.name/]) {
		Statement stmt = null;
		int id=0;
		try {
			Connection conn=Database.getConnection();

			String sql = "INSERT INTO [aTable.name/] ( ";

			[for (c: Column | aTable.columns)]
				sql += "[c.name/], ";
			[/for]
			sql += " ) VALUES ( ";
			[for (c: Column | aTable.columns)]
				sql += a[aTable.name/].[c.name/]() + ", ";
			[/for]
			sql += ")";
			
			stmt = conn.createStatement();
			
			stmt.execute(sql, Statement.RETURN_GENERATED_KEYS);
			ResultSet generatedKeys = stmt.getGeneratedKeys();
			if (generatedKeys.next()) {
			    id = generatedKeys.getInt(1);
			} else {
				id=0;
			}

			// Clean-up environment
			stmt.close();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
				se2.printStackTrace();
			} // nothing we can do
		} // end try   	
		return id;
    }

    private boolean sqlUpdate([aTable.name/] a[aTable.name/]) {
		Statement stmt = null;
		try {
			Connection conn=Database.getConnection();
			
			stmt = conn.createStatement();

			String sql = "UPDATE [aTable.name/] SET ";

			[for (c: Column | aTable.columns)]
				sql += "[c.name/]=" + a[aTable.name/].[c.name/]() + ", ";
			[/for]
			sql += "WHERE id="+a[aTable.name/].id();

			stmt.executeUpdate(sql);

			// Clean-up environment
			stmt.close();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
			return false;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
				se2.printStackTrace();
				return false;
			} // nothing we can do
		} // end try   	
		return true;
    }
    
    public [aTable.name/] save([aTable.name/] a[aTable.name/]) {
    	if (a[aTable.name/].id()==0) {
    		// Insert
    		int newId=sqlInsert(a[aTable.name/]);
    		return [aTable.name/]OfId(newId);
    	}
    	else
    	{
    		// Update
    		sqlUpdate(a[aTable.name/]);
    		return a[aTable.name/];
    	}
    }
    
    public List<[aTable.name/]> all() {
		Statement stmt = null;
		[aTable.name/] [aTable.name.toLowerCase()/]=null;
		ArrayList<[aTable.name/]> list=new ArrayList<[aTable.name/]>();
		try {
			Connection conn=Database.getConnection();
			
			String sql = "SELECT * FROM [aTable.name/]";
			stmt = conn.createStatement();

			stmt.executeQuery(sql);
			ResultSet res = stmt.getResultSet();
			while (res.next()) {

				[aTable.name/]DTO dto = new [aTable.name/]DTO();

				dto.name = res.getString(1);
				dto.id = res.getInt(2);

				

				[aTable.name.toLowerCase()/] = ([aTable.name/])FFactory.getInstance().create[aTable.name/](dto);
 
				
				list.add([aTable.name.toLowerCase()/] );
			} 

			// Clean-up environment
			stmt.close();
		} catch (SQLException se) {
			// Handle errors for JDBC
			se.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// finally block used to close resources
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
				se2.printStackTrace();
			} // nothing we can do
		} // end try      	
    	return list;
    }
}
[/file]
[/template]